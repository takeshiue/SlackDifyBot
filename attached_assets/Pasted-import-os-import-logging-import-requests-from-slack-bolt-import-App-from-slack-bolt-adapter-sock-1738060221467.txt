import os
import logging
import requests
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler

# ログ設定 (出力先をapp.logファイルに設定)
logging.basicConfig(
    filename='app.log',                 # ログ出力先のファイル名
    level=logging.INFO,                 # ログのレベル
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = App(token=os.environ["SLACK_BOT_TOKEN"])

try:
    bot_user_id = app.client.auth_test()["user_id"]
    logger.info("Slack接続成功: Bot User ID = %s", bot_user_id)
except Exception as e:
    logger.error("Slack接続エラー: %s", str(e))
    raise

@app.event("app_mention")
def handle_app_mention(event, say):
    logger.info("メンションイベント受信: %s", event)

    if event and 'text' in event:
        dify_api_key = os.environ.get("DIFY_API_KEY")
        if not dify_api_key:
            logger.error("DIFY_API_KEYが設定されていません")
            say("内部エラー: APIキーが設定されていません。")
            return

        url = 'https://dify.uematsu.cn/V1'  # Dify API endpoint
        user = event['user']
        query = event['text'].replace(f"<@{bot_user_id}>", "").strip()  # メンション部分を削除

        headers = {
            'Authorization': f'Bearer {dify_api_key}',
            'Content-Type': 'application/json'
        }
        data = {
            'query': query,
            'response_mode': 'blocking',
            'user': user,
            'conversation_id': '',  # 必要に応じて設定
            'inputs': {}
        }

        try:
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            response_data = response.json()
            logger.info("Dify接続成功: %s", response_data)

            if 'answer' in response_data:
                say(response_data['answer'])
            else:
                logger.warning("Dify APIからの予期しないレスポンス: %s", response_data)
                say(f"Dify APIからの予期しないレスポンス: {response_data}")

        except requests.RequestException as e:
            logger.error("Dify接続エラー: %s", str(e))
            say("Dify APIへの接続に失敗しました。")
    else:
        logger.warning("メッセージの内容を取得できませんでした: %s", event)
        say("メッセージの内容を取得できませんでした。")

if __name__ == "__main__":
    # プログラム起動時のログ出力
    logger.info("start")
    try:
        SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"]).start()
        logger.info("Slackアプリが正常に起動しました。")
    except Exception as e:
        logger.error("Slackアプリの起動エラー: %s", str(e))
        raise
